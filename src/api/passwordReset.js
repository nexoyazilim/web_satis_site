import apiClient from './client';

// Development: Vite proxy (/api) Ã¼zerinden; Production: gerÃ§ek URL
const API_BASE_URL = import.meta.env.DEV 
  ? '/api' 
  : (import.meta.env.VITE_API_URL || 'https://nexoyazilim-api.us-east-1.elasticbeanstalk.com');

const passwordResetService = {
  // Email kontrolÃ¼ (enumerasyon korumalÄ±)
  async checkEmail(email) {
    try {
      if (import.meta.env.DEV) console.log('ðŸ”µ Email Check (DEV):', { email });
      
      const response = await apiClient.post('/auth/email-check', {
        email: email
      });
      
      if (import.meta.env.DEV) console.log('âœ… Email Check Success:', response.data);
      return response.data;
    } catch (error) {
      if (import.meta.env.DEV) {
        console.error('ðŸ”´ Email kontrolÃ¼ baÅŸarÄ±sÄ±z:', error);
        console.error('ðŸ”´ Error Response:', error.response?.data);
      }
      throw error;
    }
  },

  // Åžifre sÄ±fÄ±rlama talebi gÃ¶nder
  async requestPasswordReset(email) {
    try {
      if (import.meta.env.DEV) console.log('ðŸ”µ Password Reset Request (DEV):', { email });
      
      const response = await apiClient.post('/password-reset/request', {
        email: email
      });
      
      if (import.meta.env.DEV) console.log('âœ… Password Reset Request Success:', response.data);
      return response.data;
    } catch (error) {
      if (import.meta.env.DEV) {
        console.error('ðŸ”´ Åžifre sÄ±fÄ±rlama talebi gÃ¶nderilemedi:', error);
        console.error('ðŸ”´ Error Response:', error.response?.data);
      }
      throw error;
    }
  },

  // Token doÄŸrulama
  async validateToken(token) {
    try {
      if (import.meta.env.DEV) console.log('ðŸ”µ Token Validation (DEV):', { token: '***' });
      
      const response = await apiClient.get(`/password-reset/validate/${token}`);
      
      if (import.meta.env.DEV) console.log('âœ… Token Validation Success:', response.data);
      return response.data;
    } catch (error) {
      if (import.meta.env.DEV) {
        console.error('ðŸ”´ Token doÄŸrulanamadÄ±:', error);
        console.error('ðŸ”´ Error Response:', error.response?.data);
      }
      throw error;
    }
  },

  // Åžifre sÄ±fÄ±rlama
  async resetPassword(token, newPassword) {
    try {
      if (import.meta.env.DEV) console.log('ðŸ”µ Password Reset (DEV):', { token: '***', newPassword: '***' });
      
      const response = await apiClient.post('/password-reset/reset', {
        token: token,
        newPassword: newPassword
      });
      
      if (import.meta.env.DEV) console.log('âœ… Password Reset Success:', response.data);
      return response.data;
    } catch (error) {
      if (import.meta.env.DEV) {
        console.error('ðŸ”´ Åžifre sÄ±fÄ±rlanamadÄ±:', error);
        console.error('ðŸ”´ Error Response:', error.response?.data);
      }
      throw error;
    }
  },

  // SÃ¼resi dolmuÅŸ token'larÄ± temizle (admin)
  async cleanupExpiredTokens() {
    try {
      if (import.meta.env.DEV) console.log('ðŸ”µ Token Cleanup (DEV)');
      
      const response = await apiClient.post('/password-reset/cleanup');
      
      if (import.meta.env.DEV) console.log('âœ… Token Cleanup Success:', response.data);
      return response.data;
    } catch (error) {
      if (import.meta.env.DEV) {
        console.error('ðŸ”´ Token temizleme baÅŸarÄ±sÄ±z:', error);
        console.error('ðŸ”´ Error Response:', error.response?.data);
      }
      throw error;
    }
  }
};

export { passwordResetService };
